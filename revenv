#!/usr/bin/env bash

abspath() {
    local to_check="$1"
    if [[ -d "$to_check" ]]; then
        echo $( cd "$to_check" && pwd )
    elif [[ -f "$to_check" ]]; then
        echo $( cd "$( dirname "$to_check")" && pwd )/$(basename $to_check)
    fi
}

launch_zshell() {
    # zsh doesn't allow directly specifying an rc file, only a dotdir,
    # so create a temporary dotdir with the right settings and point
    # zsh at that
    ZDOTDIR="/tmp/zshdot.$(date +%s)"
    mkdir -p $ZDOTDIR 2>/dev/null
    for zfile in "$HOME"/.z*; do
        cp "$zfile" "$ZDOTDIR"
    done
    echo 'export PS1="%{$fg_bold[blue]%}($(basename "$VIRTUAL_ENV")) $PS1"' 2>/dev/null >> "$ZDOTDIR/.zshrc"
    echo 'export PS1="%{$fg_bold[blue]%}($(basename "$VIRTUAL_ENV")) $PS1"' 2>/dev/null >> "$ZDOTDIR/.zprofile"
    export ZDOTDIR
    zsh
    rm -rf "$ZDOTDIR"
}

launch_bash() {
    rcfile="/tmp/revenv-bashrc.$(date +%s)"
    cp "$HOME/.bashrc" "$rcfile"
    echo 'export PS1="\[\033[01;34m\](\$(basename '$VIRTUAL_ENV')) \e[0m$PS1"' >> $rcfile
    bash --rcfile "$rcfile"
    rm "$rcfile"
}

launch_shell() {
    if echo $SHELL | grep -q zsh; then
        launch_zshell
    elif echo $SHELL | grep -q bash; then
        launch_bash
    else
        $SHELL
    fi
}

start_venv() {
    export VIRTUAL_ENV="$WORKON_HOME/$1"
    check_venv_exists "$1" || exit 1
    export PATH="$VIRTUAL_ENV/bin:$PATH"
    unset PYTHON_HOME
    echo "Starting revenv at [$VIRTUAL_ENV]"
    launch_shell
}

new_venv() {
    local newenv="$WORKON_HOME/$1"
    virtualenv "$newenv" &&
    echo "Created virtualenv at: [$newenv]"
    start_venv "$1"
}

del_venv() {
    check_venv_exists "$1" || exit 1
    if [[ "$1" == "$(basename $VIRTUAL_ENV)" ]]; then
        echo "Can't delete virtualenv '$1' since it's the currently active virtualenv!"
        echo "Please exit this shell and rerun '$(basename $0) rm $1'"
        exit 1
    fi
    local target="$WORKON_HOME/$1"
    local choice
    read -p "About to delete venv at: ${target}. Sure (y/n)? " choice
    case "$choice" in
        y|yes|Y)
            rm -rf "$target" &&
            echo "Deleted venv at [$target]" ||
                echo "Unable to delete virtualenv at $target"
            ;;
    esac
}

check_venv_exists() {
    # Check if a venv exists, die if not present
    if [[ ! -d "$WORKON_HOME/$1" ]]; then
        echo "Virtualenv '$1' not found! You can create a new virtualenv with "\
            "\`$(basename $0) new [VENV_NAME]\`"
        return 1
    fi
}

initial_config() {
    default_storage_dir="$HOME/.local/revenv"
    local choice
    read -p "Where should virtualenvs be stored [$default_storage_dir]? " storage_dir
    if [[ -z $storage_dir ]]; then
        storage_dir="$default_storage_dir"
    fi
    echo "export WORKON_HOME=\"$storage_dir\"" > "$HOME/.revenv"
    export WORKON_HOME="$storage_dir"
    mkdir -p "$WORKON_HOME" &> /dev/null

    if ! which $(basename $0) &> /dev/null; then
        read -p "$(basename $0) not found in PATH. Copy to /usr/local/bin/$(basename $0)? (y/n) [y] " choice
        choice="$(echo $choice | tr A-Z a-z)"
        case "$choice" in
            n|no)
                ;; 
            *)
                cp "$0" "/usr/local/bin/$(basename $0)" || (
                    echo "Copy failed, retrying with sudo (please enter sudo pw if prompted)"
                    sudo cp "$0" "/usr/local/bin/$(basename $0)"
                )
                ;;
        esac
    fi

}

ls_venvs() {
    local startdir="$PWD"
    cd "$WORKON_HOME"
    echo "Virtualenvs in [$WORKON_HOME]:"
    ls
    cd "$startdir"
}

usage() {
    local exename=$(basename $0)
cat <<- _EOF_
$exename provides a simple wrapper around virtualenv to let you work on your
virtualenvs in one place. Functionality is intentionally quite minimal.

Usage:
    $exename [ setup | workon | ls | new | rm ]

setup
    Initial config of revenv. Will set a WORKON_HOME (the directory where
    your virtualenvs will live) if one doesn't exist.

workon [virtualenv name]
    Activate the specified virtualenv

ls
    List all virtualenvs in the \$WORKON_HOME directory

new [virtualenv name]
    Create a new virtualenv with the specified name

rm [virtualenv name]
    Deletes specified virtualenv

_EOF_
}

check_deps() {
    if [[ ! -d $WORKON_HOME ]]; then
        read -p "No WORKON_HOME found. Run initial config? (y/n) " choice
        case "$choice" in
            y|Y|yes)
                initial_config
                ;;
        esac
    fi

    if ! which pip &> /dev/null ; then
        echo -e "You don't seem to have pip installed. Please install pip (on most systems you can do this via \`easy_install pip\`) and run $(basename $0) again.\n"
        failed=true
    fi

    if ! which virtualenv &> /dev/null ; then
        echo -e "You don't seem to have virtualenv installed. Please install virtualenv via \`pip install virtualenv\` and run $(basename $0) again."
        failed=true
    fi

    [[ -n $failed ]] && exit 1
}



if [[ -f "$HOME/.revenv" ]]; then
    source "$HOME/.revenv"
fi

check_deps


cmd="$(echo $1 | tr A-Z a-z)"
case "$cmd" in
    setup|initial-config|init|initial-setup)
        initial_config
        ;;
    w|workon|work_on|work-on)
        shift
        start_venv $@
        ;;
    n|c|new|create)
        shift
        new_venv $@
        ;;
    rm|del)
        shift
        del_venv $@
        ;;
    ls|list)
        shift
        ls_venvs $@
        ;;
    *)
        usage
        ;;
esac

